(** THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS *)
(** [binpow]: function definitions *)
open primitivesLib divDefLib
open binpow_TypesTheory

val _ = new_theory "binpow_Funs"


val [binpow_fwd_def] = DefineDiv ‘
  (** [binpow::binpow]: forward function *)
  binpow_fwd (a : u32) (n : u32) : u32 result =
    if n = int_to_u32 0
    then Return (int_to_u32 1)
    else (
      do
      i <- u32_rem n (int_to_u32 2);
      if i = int_to_u32 1
      then (
        do
        i0 <- u32_sub n (int_to_u32 1);
        i1 <- u32_div i0 (int_to_u32 2);
        half_pow <- binpow_fwd a i1;
        i2 <- u32_mul half_pow half_pow;
        u32_mul i2 a
        od)
      else (
        do
        i0 <- u32_div n (int_to_u32 2);
        half_pow <- binpow_fwd a i0;
        u32_mul half_pow half_pow
        od)
      od)
’

val _ = export_theory ()
